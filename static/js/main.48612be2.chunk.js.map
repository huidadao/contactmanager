{"version":3,"sources":["components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","response","this","data","value","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","onClick","style","cursor","bind","float","color","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updateContact","match","params","put","Test","title","body","fetch","then","json","console","log","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48612be2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\"></i> Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\"></i> Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\"></i> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n}\n\nexport default Header;","import React from 'react'\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple App to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\n      <p className=\"lead\">Sorry, that page does not exist</p>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact =>\n          contact.id !== action.payload)\n      };\n    case 'ADD_CONTACT':\n        return {\n          ...state,\n          contacts: [action.payload, ...state.contacts]\n        };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => \n          contact.id === action.payload.id \n          ? (contact = action.payload) \n          : contact)\n      };\n    default:\n      return state;\n  }\n}\n\nexport class Provider extends Component {\n  state = {\n    contacts: [],\n    dispatch: action => this.setState(state => reducer(state, action))\n  };\n\n  async componentDidMount() {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n\n    this.setState({contacts: response.data});\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n\n  onDeleteClick = async (id, dispatch) => {\n    await axios.delete(`http://jsonplaceholder.typicode.com/users/${id}`);\n\n    dispatch({type: 'DELETE_CONTACT', payload: id});\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name} \n                <i \n                  onClick={() => this.setState({ showContactInfo: !this.state.showContactInfo })} \n                  className=\"fas fa-caret-down\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <i\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                  className=\"fas fa-times\" \n                  style={{ cursor: 'pointer', float: 'right', color: 'red' }} \n                />\n\n                <Link to={`contact/edit/${id}`}>\n                  <i \n                    className=\"fas fa-pencil-alt\"\n                    style={{\n                      cursor: 'pointer',\n                      float: 'right',\n                      color: 'black',\n                      marginRight: '1rem'\n                    }}  \n                  ></i>\n                </Link>\n              </h4>\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {email}</li>\n                  <li className=\"list-group-item\">Phone: {phone}</li>\n                </ul>\n                ) : null}\n              \n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n}\n\nexport default Contact;","import React, { Component } from 'react'\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact List</span>\n              </h1>\n              {contacts.map(contact => \n                <Contact \n                  key={contact.id}\n                  contact={contact}\n                />\n              )}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Contacts;","import React from 'react'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input \n        type={type}\n        name={name}\n        className={classnames('form-control form-control-lg', {'is-invalid': error})}\n        placeholder={placeholder}\n        value={value} \n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n}\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n  type: 'text'\n}\n\nexport default TextInputGroup;","import React, { Component } from 'react'\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios'; \n\nclass AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  }\n\n  onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n  onSubmit = async (dispatch, e) => { \n    e.preventDefault();\n    \n    const { name, email, phone } = this.state;\n\n    // Check for Errors\n    if (name === '') {\n      this.setState({errors: { name: 'Name is required' }});\n      return;\n    }\n\n    if (email === '') {\n      this.setState({errors: { email: 'Email is required' }});\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({errors: { phone: 'Phone is required' }});\n      return;\n    }\n\n    const newContact = {\n      name,\n      email,\n      phone\n    }\n\n    const response = await axios.post(\n      'http://jsonplaceholder.typicode.com/users', newContact\n    );\n\n    dispatch({type: 'ADD_CONTACT', payload: response.data});\n\n    \n\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    })\n\n    this.props.history.push('/');\n  }\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\" />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;","import React, { Component } from 'react'\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios'; \n\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  }\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const response = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n\n    const contact = response.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n  onSubmit = async (dispatch, e) => { \n    e.preventDefault();\n    \n    const { name, email, phone } = this.state;\n\n    // Check for Errors\n    if (name === '') {\n      this.setState({errors: { name: 'Name is required' }});\n      return;\n    }\n\n    if (email === '') {\n      this.setState({errors: { email: 'Email is required' }});\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({errors: { phone: 'Phone is required' }});\n      return;\n    }\n\n    const updateContact = {\n      name,\n      email,\n      phone\n    }\n    const { id } = this.props.match.params;\n    const response = await axios.put(`http://jsonplaceholder.typicode.com/users/${id}`, updateContact);\n\n    dispatch({type: 'UPDATE_CONTACT', payload: response.data});\n\n\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    })\n\n    this.props.history.push('/');\n  }\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\"><h2>Edit Contact</h2></div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\" />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;","import React, { Component } from 'react'\n\nclass Test extends Component {\n  state = {\n    title: '',\n    body: ''\n  };\n\n  componentDidMount() {\n    fetch ('https://jsonplaceholder.typicode.com/posts/1')\n      .then(response => response.json())\n      .then(data => this.setState({\n        title: data.title,\n        body: data.body\n      })\n    );\n  }\n\n  // UNSAFE_componentWillMount() {\n  //   console.log('componentWillMount...');\n  // }\n\n  // componentDidUpdate() {\n  //   console.log('componentDidUpdate...');\n  // }\n\n  // UNSAFE_componentWillUpdate() {\n  //   console.log('componentWillUpdate...');\n  // }\n\n  // UNSAFE_componentWillReceiveProps(nextProps, nextState) {\n  //   console.log('UNSAFE_componentWillReceiveProps...');\n  // }\n\n  // static getDerivedStateFromProps(nextProps, prevState) {\n  //   return {\n  //     test: 'somthing'\n  //   };\n  // }\n\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('getSnapshotBeforeUpdate...');\n  // }\n\n  render() {\n    const { title, body } = this.state;\n    console.log(title, body);\n\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    )\n  }\n}\n\nexport default Test;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Test from './components/test/Test';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} /> \n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}